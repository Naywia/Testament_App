@rendermode InteractiveServer
<div class="modal fade @ModalClass" id="thing" tabindex="-1" role="dialog" style="display:@ModalDisplay" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document" > 
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Tilføj arving</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <label>
                    Navn:
                    <InputText @bind-value="editPerson.Name"></InputText>
                </label>
                <label>
                    Fødselsdag:
                    <InputDate TValue="DateOnly" @bind-Value="editPerson.Birthday"></InputDate>
                </label>
                <label>
                    ErDød?:
                    <InputCheckbox @bind-Value="editPerson.IsAlive"></InputCheckbox>
                </label>
                <label>
                    Børn:
                    @foreach (var child in editPerson.Children)
                    {
                        <p>@child.Name</p>
                    }
                    <InputSelect @bind-value="selectedChildName">
                        @if (selectedChildName == null)
                        {
                            <option selected value="">None</option>
                        }
                        @foreach (var person in _persons)
                        {
                            <option value="@person.Name">@person.Name</option>
                        }
                    </InputSelect>
                    <button @onclick="() => editPerson.AddChild(selectedChild)">Tilføj barn</button>
                </label>
                <label>
                    forældre:
                    @foreach (var parent in editPerson.Parents)
                    {
                        <p>@parent.Name</p>
                    }
                    <InputSelect @bind-value="selectedParentName">
                        @if (selectedParentName == null)
                        {
                            <option selected value="">None</option>
                        }
                        @foreach (var person in _persons)
                        {
                            <option value="@person.Name">@person.Name</option>
                        }
                    </InputSelect>
                    <button @onclick="() => editPerson.AddParent(selectedParent)">Tilføj forælder</button>
                </label>
            </div>
            <div class="modal-footer">
                @if (CommandDelete != null)
                {
                     <button class="btn btn-warning" @onclick="() => { CommandDelete(editPerson); Close(); }">Fjern arving</button> 
                }
                <button class="button" @onclick="() => { Command(editPerson); Close(); }">Tilføj arving</button>
                <button class="button-cancel" data-dismiss="modal" @onclick="Close">Annuller</button>
            </div>
        </div>
    </div>
</div>

<div class="modal-backdrop @ModalClass"></div>
@*
@if (ShowBackdrop)
{
    <div class="modal-backdrop @ModalClass"></div>
}
*@

@code {
    private String ModalDisplay = "none;";
    private String ModalClass = "visually-hidden";
    //private bool ShowBackdrop = false;
    private Person editPerson { get; set; }
    private Action<Person>? Command { get; set; }
    private Action<Person>? CommandDelete { get; set; }

    private IEnumerable<Person> _persons => FamilyTree.GetMembers();
    private String? selectedParentName { get; set; } = null;
    private Person? selectedParent => _persons.First(d => d.Name == selectedParentName);
    private String? selectedChildName { get; set; } = null;
    private Person? selectedChild => _persons.First(d => d.Name == selectedChildName);

    protected override void OnParametersSet()
    {
        editPerson = new();
        base.OnParametersSet();
    }

    public async void Open(Action<Person> submit)
    {
        ModalDisplay = "block;";
        ModalClass = "show";
        //ShowBackdrop = true;
        editPerson = new();
        Command = submit;
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    public async void Open(Action<Person> edit, Action<Person> delete, Person heir)
    {
        ModalDisplay = "block;";
        ModalClass = "show";
        //ShowBackdrop = true;
        editPerson = heir;
        Command = edit;
        CommandDelete = delete;
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void Close()
    {
        ModalDisplay = "none;";
        ModalClass = "visually-hidden";
        //ShowBackdrop = false;
        Command = null;
        CommandDelete = null;
        //try
        //{
        //    await InvokeAsync(StateHasChanged);
        //}
        //catch (Exception e)
        //{
        //    Console.WriteLine(e);
        //    throw;
        //}
    }
}