@rendermode InteractiveServer
<div style="display: flex;flex-direction: column;gap: 5px;">
    <label>
        Navn:
        <InputText @bind-value="editAsset.Name"></InputText>
    </label>
    <label>
        Værdi:
        <InputNumber @bind-Value="editAsset.Value"></InputNumber>
    </label>
    <label>
        Beskrivelse:
        <InputText @bind-Value="editAsset.Description"></InputText>
    </label>

    <label>
        Relation:
        <InputSelect @bind-Value="selectedTestatorName">
            @if (selectedTestatorName == null)
            {
                <option value="">none</option>
            }
            @foreach (var testator in _testators)
            {
                <option value="@testator.Name">@testator.Name</option>
            }
        </InputSelect>
        <button class="btn-success button-xtra" @onclick="()=> selectedTestator.AddAsset(editAsset)">Tilknyt til arvelader</button>
    </label>
</div>
@code {
    [Parameter]
    public Object? EditItem { get; set; }
    private Asset editAsset { get; set; }
    private IEnumerable<Person> _persons => FamilyTree.GetMembers();
    private IEnumerable<Testator> _testators => Inheritance.GetTestators();
    private String? selectedTestatorName { get; set; } = null;
    private Testator selectedTestator => _testators.First(t => t.Name == selectedTestatorName);

    protected override void OnParametersSet()
    {
        if (EditItem != null)
        {
            editAsset = (Asset)EditItem;
            Console.WriteLine($"EditTestator: {editAsset.Name}");
            InvokeAsync(StateHasChanged);
        }
        else
        {
            editAsset = new();
        }
        base.OnParametersSet();
    }

    public void Submit()
    {
        Inheritance.AddAsset(editAsset);
        Reset();
    }

    public void Delete()
    {
        var testator = Inheritance.GetTestators().FirstOrDefault(t => t.GetAssets().Contains(editAsset));
        if (testator != null) testator.DeleteAsset(editAsset);
        Inheritance.DeleteAsset(editAsset);
        Reset();
    }

    private void Reset()
    {
        try
        {
            InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        editAsset = new();
        EditItem = null;
        selectedTestatorName = null;
    }
}