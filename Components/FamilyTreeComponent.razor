@using Testament_App.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="container p-3 border border-dark border-1 rounded-3">
    <button class="btn btn-primary" @onclick="() => { if (Inheritance.GetTestators().Length < 2) modal.Open(typeof(TestatorEdit), Update); }">Tilføj ny arvelader</button>
    <button class="btn btn-primary" @onclick="() => modal.Open(typeof(PersonEdit), Update)">Tilføj ny arving</button>
    <button class="btn btn-primary" @onclick="() => modal.Open(typeof(AssetEdit), Update)">Tilføj nyt aktiv</button>

    <div id="familyTree">

    </div>

    @if (Inheritance.GetTestators().Any())
    {
        <h2>Stamtræ:</h2>
        <h3>Arveladere:</h3>
    @foreach (var testator in Inheritance.GetTestators())
    {
        <div class="d-flex">
            <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => modal.Open(typeof(TestatorEdit), testator, Update)">Navn: @testator.Name</p>
            @foreach (var asset in testator.GetAssets())
            {
                <p class="border border-dark border-1 rounded-3" style="width: 100px;" @onclick="() => modal.Open(typeof(AssetEdit), asset, Update)">Aktiv: @asset.Name </p>
            }
        </div>
    }
    <h3>Arvinger:</h3>
    @foreach (var heir in Inheritance.GetHeirs())
    {
        <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => modal.Open(typeof(PersonEdit), heir, Update)">Navn: @heir.Name</p>
    }
    <h3>Aktiver:</h3>
    @foreach (var asset in Inheritance.GetAssets())
    {
        <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => modal.Open(typeof(AssetEdit), asset, Update)">Navn: @asset.Name</p>
    }
    }
    @* <AssetEdit @ref="assetModal" /> *@
    <Modal @ref="modal" />
</div>

@code {
    private ElementReference familyTree;
    private Modal modal = new();

    protected override void OnAfterRender(bool firstRender)
    {
        // Opens pop-up for adding testator if none are present is checked each render-cycle
        if (!Inheritance.GetTestators().Any()) modal.Open(typeof(TestatorEdit), Update);
        base.OnAfterRender(firstRender);
        GenerateHtmlFamilyTree();
    }

    private async Task GenerateHtmlFamilyTree()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("updateFamilyTree");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private async void Update()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}
