@rendermode InteractiveServer
@if (Inheritance.GetTestators().Any())
{
    <h2>FamilyTree:</h2>
    <h3>Testators:</h3>
    @foreach (var testator in Inheritance.GetTestators())
    {
        <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => testatorModal.Open(EditTestator, testator)">Name: @testator.Name</p>
    }
    <h3>Heirs:</h3>
    @foreach (var heir in Inheritance.GetHeirs())
    {
        <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => personModal.Open(EditHeir, heir)">Name: @heir.Name</p>
    }
}
<button class="btn btn-primary" @onclick="() => { if (Inheritance.GetTestators().Length < 2) testatorModal.Open(SubmitTestator); }">Tiløj ny testator</button>
<button class="btn btn-primary" @onclick="() => personModal.Open(SubmitHeir)">Tiløj ny arving</button>
<PersonModal @ref="personModal"/>
<TestatorModal @ref="testatorModal"/>

@code {
    private PersonModal personModal = new();
    private TestatorModal testatorModal = new();

    protected override void OnAfterRender(bool firstRender)
    {
        // Opens pop-up for adding testator if none are present is checked each render-cycle
        if (!Inheritance.GetTestators().Any()) testatorModal.Open(SubmitTestator);
        base.OnAfterRender(firstRender);
    }

    private void EditTestator(Testator testator)
    {
        InvokeAsync(StateHasChanged);
    }

    private void SubmitTestator(Testator testator)
    {
        Inheritance.AddTestator(testator);
        InvokeAsync(StateHasChanged);
    }
    
    private void EditHeir(Person heir)
    {
        InvokeAsync(StateHasChanged);
    }

    private void SubmitHeir(Person heir)
    {
        Inheritance.AddHeir(heir);
        InvokeAsync(StateHasChanged);
    }
}
