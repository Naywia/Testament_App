@using Testament_App.Models
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<div class="container p-3 border border-dark border-1 rounded-3">
    <div id="familyTree">

        <div id="familyTreeGrandParentsContainer" class="generation"></div>
        <div id="familyTreeParentsContainer" class="generation"></div>
        <div id="familyTreeTestatorsContainer" class="generation"></div>
        <div id="familyTreeChildrenContainer" class="generation"></div>
        <div id="familyTreeGrandChildrenContainer" class="generation"></div>
    </div>

    <div id="familyTree">
        <div class="generation">
            <div class="familyTreePerson" id="grandParent1">Grandparent 1</div>
            <div class="familyTreePerson" id="grandParent2">Grandparent 2</div>
        </div>
        <div class="generation">
            <div class="familyTreePerson" id="parent1">Parent 1</div>
            <div class="familyTreePerson" id="parent2">Parent 2</div>
        </div>
        <div class="generation">
            <div class="familyTreePerson" id="child1">Child 1</div>
            <div class="familyTreePerson" id="child2">Child 2</div>
            <div class="familyTreePerson" id="child3">Child 3</div>
        </div>
    </div>

    @if (Inheritance.GetTestators().Any())
    {
        <h2>Stamtræ:</h2>
        <h3>Arveladere:</h3>
        @foreach (var (testator, i) in Inheritance.GetTestators().Select((testator, i) => (testator, i)))
        {
            <div class="d-flex">
                <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => modal.Open(typeof(TestatorEdit), i, Update)">Name: @testator.Name</p>
                @foreach (var asset in testator.GetAssets())
                {
                    <p class="border border-dark border-1 rounded-3" style="width: 100px;">Asset: @asset.Name </p>
                }
            </div>
        }
        <h3>Arvinger:</h3>
        @foreach (var (heir, i) in Inheritance.GetHeirs().Select((heir, i) => (heir, i)))
        {
            <p class="border border-dark border-1 rounded-3" style="width: 280px;" @onclick="() => modal.Open(typeof(PersonEdit), i, Update)">Name: @heir.Name</p>
        }
    }
    <button class="btn btn-primary" @onclick="() => { if (Inheritance.GetTestators().Length < 2) modal.Open(typeof(TestatorEdit), Update); }">Tilføj ny arvelader</button>
    <button class="btn btn-primary" @onclick="() => modal.Open(typeof(PersonEdit), Update)">Tilføj ny arving</button>
    <button class="btn btn-primary" @onclick="() => modal.Open(typeof(AssetEdit), Update)">Tilføj nyt aktiv</button>
    @* <AssetEdit @ref="assetModal" /> *@
    <Modal @ref="modal" />
</div>

@code {
    private ElementReference familyTree;
    private Modal modal = new();
    //private AssetEdit assetModal = new();

    protected override void OnAfterRender(bool firstRender)
    {
        // Opens pop-up for adding testator if none are present is checked each render-cycle
        if (!Inheritance.GetTestators().Any()) modal.Open(typeof(TestatorEdit), Update);
        base.OnAfterRender(firstRender);
        GenerateHtmlFamilyTree();
    }

    private async Task GenerateHtmlFamilyTree()
    {
        string grandParentsHtml = "";
        string parentsHtml = "";
        string testatorsHtml = "";
        string childrenHtml = "";
        string grandChildrenHtml = "";
        foreach (Person testator in Inheritance.GetTestators())
        {
            if (testator.Children.Count > 0)
            {
                testatorsHtml += $@"<p class=""familyTreePerson border border-dark border-1 rounded-3"">Name: {testator.Name}</p>";
                foreach (Person child in testator.GetChildren())
                {
                    childrenHtml += $@"<p class=""familyTreePerson border border-dark border-1 rounded-3"">Name: {child.Name}</p>";
                    foreach (Person grandChild in child.GetChildren())
                    {
                        grandChildrenHtml += $@"<p class=""familyTreePerson border border-dark border-1 rounded-3"">Name: {grandChild.Name}</p>";
                    }
                }
                foreach (Person parent in testator.GetAncestors())
                {
                    parentsHtml += $@"<p class=""familyTreePerson border border-dark border-1 rounded-3"">Name: {parent.Name}</p>";
                    foreach (Person grandParent in parent.GetAncestors())
                    {
                        grandParentsHtml += $@"<p class=""familyTreePerson border border-dark border-1 rounded-3"">Name: {grandParent.Name}</p>";
                    }
                }
            }
        }

        await JSRuntime.InvokeVoidAsync("addFamilyTree", "familyTreeGrandParentsContainer", grandParentsHtml);
        await JSRuntime.InvokeVoidAsync("addFamilyTree", "familyTreeParentsContainer", parentsHtml);
        await JSRuntime.InvokeVoidAsync("addFamilyTree", "familyTreeTestatorsContainer", testatorsHtml);
        await JSRuntime.InvokeVoidAsync("addFamilyTree", "familyTreeChildrenContainer", childrenHtml);
        await JSRuntime.InvokeVoidAsync("addFamilyTree", "familyTreeGrandChildrenContainer", grandChildrenHtml);
    }

    private async void Update()
    {
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    //private void SubmitAsset(Asset asset)
    //{
    //    Inheritance.AddAsset(asset);
    //    InvokeAsync(StateHasChanged);
    //}
}
