@rendermode InteractiveServer
@if (Inheritance.GetTestators().Any())
{
    <h2>FamilyTree:</h2>
    <h3>Testators:</h3>
    @foreach (var testator in Inheritance.GetTestators())
    {
        <div class="d-flex">
            <p class="border border-dark border-1 rounded-3" style="width: 280px;"
                @onclick="() => testatorModal.Open(EditTestator, DeleteTestator, testator)">Name: @testator.Name</p>
            @foreach (var asset in testator.GetAssets())
            {
                <p class="border border-dark border-1 rounded-3" style="width: 100px;">Asset: @asset.Name </p>
            }
        </div>
    }

    <h3>Heirs:</h3>
    @foreach (var heir in Inheritance.GetHeirs())
    {
        <p class="border border-dark border-1 rounded-3" style="width: 280px;"
            @onclick="() => personModal.Open(EditHeir, DeleteHeir, heir)">Name: @heir.Name</p>
    }

    <button class="btn btn-primary"
        @onclick="() => { if (Inheritance.GetTestators().Length < 2) testatorModal.Open(SubmitTestator); }">Tiløj ny
        testator</button>
    <button class="btn btn-primary" @onclick="() => personModal.Open(SubmitHeir)">Tiløj ny arving</button>
    <button class="btn btn-primary" @onclick="() => assetModal.Open(SubmitAsset)">Tilføj ny asset</button>
}

<PersonModal @ref="personModal" />
<TestatorModal @ref="testatorModal" />
<AssetModal @ref="assetModal" />

@code {
    private Testator? editTestator { get; set; }
    private Person? editHeir { get; set; }
    private Asset? editAsset { get; set; }

    private PersonModal personModal = new();
    private TestatorModal testatorModal = new();
    private AssetModal assetModal = new();

    protected override void OnAfterRender(bool firstRender)
    {
        // Opens pop-up for adding testator if none are present is checked each render-cycle
        if (!Inheritance.GetTestators().Any()) testatorModal.Open(SubmitTestator);
        base.OnAfterRender(firstRender);
    }
    protected override void OnInitialized()
    {
        editTestator = new();
        editHeir = new();
        editAsset = new();
        base.OnInitialized();
    }

    private async void SubmitTestator(Testator testator)
    {

        Inheritance.AddTestator(testator);
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void EditTestator(Testator testator)
    {
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void DeleteTestator(Testator testator)
    {
        Inheritance.DeleteTestator(testator);
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void SubmitHeir(Person heir)
    {
        Inheritance.AddHeir(heir);
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void EditHeir(Person heir)
    {
        //InvokeAsync(StateHasChanged);
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async void DeleteHeir(Person heir)
    {
        Inheritance.DeleteHeir(heir);
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void SubmitAsset(Asset asset)
    {
        Inheritance.AddAsset(asset);
        InvokeAsync(StateHasChanged);
    }

}
